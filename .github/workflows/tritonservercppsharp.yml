name: tritonservercppsharp

on: workflow_dispatch

env:
  PLATFORM: x64
  FRAMEWORK: net80
  DOTNET_ROOT: /usr/share/dotnet
  DOTNETSDKVER: 8.0.303
  DOTNETFWKVER: 8.0.7

jobs:
  tritonservercppsharp:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v2

      - name: Write down the bindings code
        run: |
          echo '<Project Sdk="Microsoft.NET.Sdk"><PropertyGroup><OutputType>Exe</OutputType><TargetFramework>net8.0</TargetFramework></PropertyGroup><ItemGroup><Compile Remove="CppSharp/**/*.cs"/><Compile Include="*.cs"/></ItemGroup></Project>' > tritonservercppsharp.csproj 
          tee tritonservercppsharp.cs <<EOF
              namespace CppSharpTransformer { public class DllDemoGenerator : CppSharp.ILibrary {
              public static void Main(string[] args) { CppSharp.ConsoleDriver.Run(new DllDemoGenerator()); }
              public void SetupPasses(CppSharp.Driver driver) { }
              public void Preprocess(CppSharp.Driver driver, CppSharp.AST.ASTContext ctx) { }
              public void Postprocess(CppSharp.Driver driver, CppSharp.AST.ASTContext ctx) { }
              public void Setup(CppSharp.Driver driver) {
              var options = driver.Options;
              options.GeneratorKind = CppSharp.Generators.GeneratorKind.CSharp;
              var module = options.AddModule("TritonServerCppSharp");
              module.IncludeDirs.Add("core/include");
              module.Headers.Add("triton/core/tritonserver.h");
              module.Headers.Add("triton/core/tritonbackend.h");
              module.Headers.Add("triton/core/tritoncache.h");
              module.Headers.Add("triton/core/tritonrepoagent.h");
              //module.LibraryDirs.Add("/path/to/triton/server.so");
              //module.Libraries.Add("tritonserver.so");
              } } }
          EOF

      - name: Clone and build CppSharp
        run: |
          git clone --single-branch --depth 1 https://github.com/mono/CppSharp
          cd CppSharp
          bash build/build.sh generate -configuration Release -platform $PLATFORM -target-framework $FRAMEWORK
          bash build/build.sh download_llvm -platform $PLATFORM -target-framework $FRAMEWORK
          bash build/build.sh restore -platform $PLATFORM -target-framework $FRAMEWORK
          bash build/build.sh -platform $PLATFORM -build_only -target-framework $FRAMEWORK
          find bin

      - name: Generating bindings
        run: |
          ./CppSharp/bin/Release_x64/CSharp.Gen
          
          git clone --single-branch --depth 1 https://github.com/triton-inference-server/core
          dotnet --version
          dotnet --list-runtimes 
          ls $DOTNET_ROOT/shared/Microsoft.NETCore.App
          DOTNETLIBDIR="$DOTNET_ROOT/shared/Microsoft.NETCore.App/$DOTNETFWKVER"
          
          #DOTNETSDKVER=$(dotnet --version)
          #DOTNETFWKVER=$(dotnet --list-runtimes | grep Microsoft.NETCore.App | tail -n 1 | cut -d " " -f2)
          
          #echo 'namespace ProgramNamespace { public static class Program { public static void Main(string[] args) { System.Console.WriteLine("Hello world!"); } } }' > footest.cs
          #dotnet "$DOTNET_ROOT/sdk/$DOTNETSDKVER/Roslyn/bincore/csc.dll" $(find "$DOTNETLIBDIR" -name "*.dll" -printf '-r:"%p" ') -target:exe -out:footest.exe footest.cs
          #echo '{"runtimeOptions":{"framework":{"name":"Microsoft.NETCore.App","version":"'$DOTNETFWKVER'"}}}' > footest.runtimeconfig.json
          #dotnet footest.exe
          #mkdir testproj && cd testproj
          #dotnet new console
          #cd ..

          #dotnet "$DOTNET_ROOT/sdk/$DOTNETSDKVER/Roslyn/bincore/csc.dll" $(find "$DOTNETLIBDIR" -name "*.dll" -printf '-r:"%p" ') $(find CppSharp/bin -name "*.dll" -printf '-r:"%p" ') -target:exe -out:tritonservercppsharp tritonservercppsharp.cs
          #echo '{"runtimeOptions":{"framework":{"name":"Microsoft.NETCore.App","version":"'$DOTNETFWKVER'"}}}' > tritonservercppsharp.runtimeconfig.json
          #find CppSharp/bin -name "*.dll" -o -name "*.so" -exec cp {} . ';'
          #./tritonservercppsharp
          #strace -ff dotnet tritonservercppsharp.exe || true
          dotnet run

      
#      - uses: actions/upload-artifact@v4
#        with:
#          path: |
#            testproj/
#            CppSharp/bin/
#            tritonservercppsharp.cs
#            tritonservercppsharp.runtimeconfig.json
#            tritonservercppsharp.exe
